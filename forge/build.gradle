plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'

archivesBaseName = "${rootProject.mod_id}-forge"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "${mod_id}-common.mixins.json"
        mixinConfig "${mod_id}-forge.mixins.json"
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    //launches {
    //    data {
    //        arg "--existing", file("src/main/resources").absolutePath
    //    }
    //}

    //dataGen {
    //    mod rootProject.mod_id
    //}
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    //Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}")

    // JEI
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}:api")
    modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}


shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()
if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = rootProject.curseforge_project_id
        addGameVersion rootProject.minecraft_version
        addGameVersion 'Forge'

        mainArtifact remapJar.archiveFile

        releaseType = rootProject.release_type
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'

        relations {
            requiredDependency 'architectury-api'
            requiredDependency 'cloth-config'
            optionalDependency 'jei'
        }
    }
}

if (ENV.MODRINTH_TOKEN) modrinth {
    token =  ENV.MODRINTH_TOKEN
    projectId = rootProject.modrinth_project_id

    versionNumber = "forge-${rootProject.mod_version}"
    versionName = "Forge ${rootProject.mod_version} (${rootProject.minecraft_version})"
    versionType = rootProject.release_type
    uploadFile = remapJar.archiveFile
    changelog = ENV.CHANGELOG

    gameVersions = [rootProject.minecraft_version]
    loaders = ["forge"]

    dependencies {
        required.project "lhGA9TYQ"
        required.project "9s6osm5g"
    }

    syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
rootProject.tasks.curseforge.dependsOn tasks.curseforge

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.group
            artifactId = "${rootProject.mod_id}-forge"
            version = rootProject.mod_version
            artifact remapJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pssbletrngle/${rootProject.mod_id}")
            credentials {
                username = ENV.GITHUB_ACTOR
                password = ENV.GITHUB_TOKEN
            }
        }
    }
}
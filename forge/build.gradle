plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: 'com.matthewprenger.cursegradle'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "${mod_id}-common.mixins.json"
        mixinConfig "${mod_id}-forge.mixins.json"
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    //Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}")

    // JEI
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}:api")
    modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}


shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()
if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = '402616'
        addGameVersion rootProject.minecraft_version
        addGameVersion 'Forge'

        mainArtifact jar.archiveFile

        releaseType = release_type
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'

        relations {
            requiredDependency 'architectury-forge'
            requiredDependency 'cloth-config-forge'
            optionalDependency 'jei'
        }
    }
}
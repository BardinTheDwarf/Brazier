plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'

archivesBaseName = "${rootProject.mod_id}-fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()
if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = rootProject.curseforge_project_id
        addGameVersion rootProject.minecraft_version
        addGameVersion 'Fabric'

        mainArtifact remapJar.archiveFile

        releaseType = rootProject.release_type
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'

        relations {
            requiredDependency 'architectury-api'
            requiredDependency 'cloth-config'
        }
    }
}

if (ENV.MODRINTH_TOKEN) modrinth {
    token =  ENV.MODRINTH_TOKEN
    projectId = rootProject.modrinth_project_id

    versionNumber = "fabric-${rootProject.mod_version}"
    versionName = "Fabric ${rootProject.mod_version} (${rootProject.minecraft_version})"
    versionType = rootProject.release_type
    uploadFile = remapJar.archiveFile
    changelog = ENV.CHANGELOG

    gameVersions = [rootProject.minecraft_version]
    loaders = ["fabric"]

    dependencies {
        required.project "lhGA9TYQ"
        required.project "9s6osm5g"
    }
}

rootProject.tasks.curseforge.dependsOn tasks.curseforge

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.group
            artifactId = "${rootProject.mod_id}-fabric"
            version = rootProject.mod_version
            artifact remapJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pssbletrngle/${rootProject.mod_id}")
            credentials {
                username = ENV.GITHUB_ACTOR
                password = ENV.GITHUB_TOKEN
            }
        }
    }
}